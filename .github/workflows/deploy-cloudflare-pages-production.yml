name: Deploy to Cloudflare Pages

on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master

permissions:
    contents: read
    deployments: write
    pull-requests: write
    statuses: write

env:
    FLUTTER_VERSION: '3.24.1'
    FLUTTER_WEB_RENDERER: 'html'
    NODE_VERSION: '20.x'

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        environment: Production

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'

            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: stable

            - name: Install dependencies
              run: npm ci

            - name: Build Flutter chart component
              run: |
                  cd chart_app
                  flutter pub get
                  flutter build web --web-renderer=${{ env.FLUTTER_WEB_RENDERER }} --release
                  cd ..

            - name: Build application
              run: npm run build:app

            - name: Prepare deployment files
              run: |
                  mkdir -p deploy
                  cp index.html manifest.json sw.js nojs-smartcharts.css deploy/
                  cp -r dist deploy/
                  if [ -d "sass/favicons" ]; then
                    mkdir -p deploy/sass
                    cp -r sass/favicons deploy/sass/
                  fi

            - name: Install Wrangler
              run: npm install -g wrangler@3.1.0

            - name: Deploy to Cloudflare Pages
              run: |
                  echo "TEST_ENV ${{env.TEST_ENV}}"
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    BRANCH_SLUG=$(echo "${{ github.head_ref }}" | sed 's|/|-|g' | sed 's|[^a-zA-Z0-9_-]||g')
                    wrangler pages deploy deploy \
                      --project-name=smartcharts-champion-jim \
                      --branch $BRANCH_SLUG
                  else
                    wrangler pages deploy deploy \
                      --project-name=smartcharts-champion-jim \
                      --branch master
                  fi
              env:
                CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
                CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}


            - name: Comment preview URL on PR
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.CLI_PAT }}
                  script: |
                      const branch = '${{ github.head_ref }}'
                        .replace(/\//g, '-')
                        .replace(/[^a-zA-Z0-9_-]/g, '');
                      const previewUrl = `https://${branch}--smartcharts-champion-jim.pages.dev`;
                      const commentBody = `ðŸš€ Preview deployment is ready!

                      **Preview URL:** [${previewUrl}](${previewUrl})`;

                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                      });

                      const botComment = comments.find(comment =>
                        comment.user.type === 'Bot' &&
                        comment.body.includes('ðŸš€ Preview deployment')
                      );

                      if (botComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body: commentBody
                        });
                      } else {
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                          body: commentBody
                        });
                      }
